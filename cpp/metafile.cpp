/* parses meta files generated by the preprocessor */

#include <iostream>
#include <fstream>
#include <cstdio>
#include "metafile.hpp"
#include "util.hpp"

namespace imosaic{

  /* default constructor empty, MetaFile is in uninitialized state */
  MetaFile::MetaFile():
  bin(0){}

  MetaFile::MetaFile(unsigned int bin, const std::string &filename):
  bin(bin){
    this->parseMetaFile(filename);
  }

  void MetaFile::parseMetaFile(const std::string &filename){
    std::fstream metafile(filename);
    if(!metafile.is_open()){
      fprintf(stderr,"Error opening file %s\n",filename.c_str());
    }else{
      std::string line; /* line we read into */
      while(!metafile.eof()){
        /* read in a line and tokenize it */
        std::getline(metafile,line);
        std::vector<std::string> tokens = tokenize(line,',');
        /* safety check */
        if(tokens.size() == 0){
          continue;
        }

        this->labels.push_back(tokens[0]); /* push filename into labels */

        /* create next row of matrix */
        cv::Mat row = cv::Mat::ones(1,tokens.size()-1,CV_32F);
        for(unsigned int i = 1; i < tokens.size();++i){
          row.at<float>(i-1) = std::stof(tokens[i]);
        }
        this->featureVectors.push_back(row); /* push row into featureVectors matrix */
      }
    }
  }

  /* print each vector line by line prepended by filename */
  void MetaFile::print() const{
    for(unsigned int i = 0; i < this->labels.size();++i){
      printf("%s: [",this->labels[i].c_str());
      for(unsigned int j = 0; j < this->featureVectors.cols;++j){
        float val = this->featureVectors.at<float>(i,j);
        if(j < this->featureVectors.cols - 1)
          printf("%f, ",val);
        else
          printf("%f",val);
      }
      printf("]\n");
    }
  }

  void MetaFile::setbin(unsigned int bin){
    this->bin = bin;
  }

  cv::Mat MetaFile::getFeatureVectors() const{
    return this->featureVectors;
  }

  std::vector<std::string> MetaFile::getLabels() const{
    return this->labels;
  }
}
